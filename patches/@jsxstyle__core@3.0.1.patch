diff --git a/lib/index.d.ts b/lib/index.d.ts
index 04b79d64668de7a55d802ce8a5aca705fd683a9f..20296dac6cca3da320b4cd18ced001118465f585 100644
--- a/lib/index.d.ts
+++ b/lib/index.d.ts
@@ -1,41 +1,82 @@
-import { getStyleCache } from './getStyleCache.js';
-export { addStyleToHead } from './addStyleToHead.js';
-export { componentStyles, type JsxstyleComponentName, } from './componentStyles.js';
-export { createClassNameGetter } from './createClassNameGetter.js';
-export { dangerousStyleValue } from './dangerousStyleValue.js';
-export { hyphenateStyleName } from './hyphenateStyleName.js';
-export { isObject } from './typePredicates.js';
-export { processProps, type GetClassNameForKeyFn } from './processProps.js';
-export { stringHash } from './stringHash.js';
-export { generateCustomPropertiesFromVariants } from './generateCustomPropertiesFromVariants.js';
-export { createRequestStyleCache } from './createRequestStyleCache.js';
-export { getVariantSwitcher } from './getVariantSwitcher.js';
+import { getStyleCache } from "./getStyleCache.js";
+export { addStyleToHead } from "./addStyleToHead.js";
+export {
+  componentStyles,
+  type JsxstyleComponentName,
+} from "./componentStyles.js";
+export { createClassNameGetter } from "./createClassNameGetter.js";
+export { dangerousStyleValue } from "./dangerousStyleValue.js";
+export { hyphenateStyleName } from "./hyphenateStyleName.js";
+export { isObject } from "./typePredicates.js";
+export { processProps, type GetClassNameForKeyFn } from "./processProps.js";
+export { stringHash } from "./stringHash.js";
+export { generateCustomPropertiesFromVariants } from "./generateCustomPropertiesFromVariants.js";
+export { createRequestStyleCache } from "./createRequestStyleCache.js";
+export { getVariantSwitcher } from "./getVariantSwitcher.js";
 export { getStyleCache };
-export type { StyleCache } from './getStyleCache.js';
-export type { CacheObject, EventHandlerKeys } from './types.js';
-export type { CommonComponentProp } from './parseStyleProps.js';
-export type { CSSProperties, JsxstyleComponentStyleProps } from './types.js';
-export type { MakeCustomPropertiesFunction, BuiltCustomProperties, VariantOptions, } from './makeCustomProperties.js';
-export type { VariantMap, CustomPropsObject, CustomPropValuesObject, GetCustomProperties, } from './generateCustomPropertiesFromVariants.js';
-export type { InsertRuleCallback } from './processProps.js';
-export type { RequestStyleCache } from './createRequestStyleCache.js';
+export type { StyleCache } from "./getStyleCache.js";
+export type { CacheObject, EventHandlerKeys } from "./types.js";
+export type { CommonComponentProp } from "./parseStyleProps.js";
+export type {
+  CSSProperties,
+  JsxstyleComponentStyleProps,
+  PseudoPrefixedProps,
+} from "./types.js";
+export type {
+  MakeCustomPropertiesFunction,
+  BuiltCustomProperties,
+  VariantOptions,
+} from "./makeCustomProperties.js";
+export type {
+  VariantMap,
+  CustomPropsObject,
+  CustomPropValuesObject,
+  GetCustomProperties,
+} from "./generateCustomPropertiesFromVariants.js";
+export type { InsertRuleCallback } from "./processProps.js";
+export type { RequestStyleCache } from "./createRequestStyleCache.js";
 export declare const cacheSingleton: {
-    reset(): void;
-    readonly classNameCache: {
-        [x: string]: string;
-        [x: symbol]: number;
-    };
-    readonly insertRuleCache: {
-        [x: string]: true;
-    };
-    injectOptions: (options: import("./getStyleCache.js").StyleCacheOptions) => void;
-    insertRule: (rule: string) => void;
-    run<T>(callback: () => T, getClassName?: import("./processProps.js").GetClassNameForKeyFn): Promise<{
-        returnValue: Awaited<T>;
-        css: string;
-    }>;
-    getComponentProps(props: Record<string, any>, classNamePropKey: string): Record<string, unknown> | null;
+  reset(): void;
+  readonly classNameCache: {
+    [x: string]: string;
+    [x: symbol]: number;
+  };
+  readonly insertRuleCache: {
+    [x: string]: true;
+  };
+  injectOptions: (
+    options: import("./getStyleCache.js").StyleCacheOptions
+  ) => void;
+  insertRule: (rule: string) => void;
+  run<T>(
+    callback: () => T,
+    getClassName?: import("./processProps.js").GetClassNameForKeyFn
+  ): Promise<{
+    returnValue: Awaited<T>;
+    css: string;
+  }>;
+  getComponentProps(
+    props: Record<string, any>,
+    classNamePropKey: string
+  ): Record<string, unknown> | null;
 };
-export declare const makeCustomProperties: <TCustomProps extends import("./generateCustomPropertiesFromVariants.js").CustomPropValuesObject>(props: TCustomProps, options?: import("./makeCustomProperties.js").VariantOptions) => import("./makeCustomProperties.js").MakeCustomPropertiesFunction<never, TCustomProps>;
-export declare const css: (...params: Array<import("./types.js").JsxstyleComponentStyleProps | string | null | undefined | false>) => string;
+export declare const makeCustomProperties: <
+  TCustomProps extends import("./generateCustomPropertiesFromVariants.js").CustomPropValuesObject
+>(
+  props: TCustomProps,
+  options?: import("./makeCustomProperties.js").VariantOptions
+) => import("./makeCustomProperties.js").MakeCustomPropertiesFunction<
+  never,
+  TCustomProps
+>;
+export declare const css: (
+  ...params: Array<
+    | import("./types.js").JsxstyleComponentStyleProps
+    | string
+    | null
+    | undefined
+    | false
+  >
+) => string;
 //# sourceMappingURL=index.d.ts.map
+