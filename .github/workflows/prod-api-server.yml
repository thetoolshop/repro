name: Production - API server build & deploy

on:
  push:
    branches:
      - main
    paths:
      - apps/api-server/**
      - packages/**
      - .github/workflows/prod-api-server.yml

permissions:
  contents: read
  id-token: write

jobs:
  build:
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Load NX build cache
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/.nx-cache
          key: nx-build-cache

      - name: Set variables
        id: vars
        run: |
          echo "branch=$(git branch --show-current | sed 's/\//_/g')" >> "$GITHUB_OUTPUT"

      - name: Setup toolchain
        uses: asdf-vm/actions/install@v2

      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v1
        with:
          service_account: ${{ secrets.GOOGLE_SERVICE_ACCOUNT }}
          credentials_json: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_KEY }}

      - name: Login to Artifact Registry
        uses: docker/login-action@v2
        with:
          registry: us-docker.pkg.dev
          username: _json_key
          password: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_KEY }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Tag Docker image and push to Google Artifact Registry
        uses: docker/build-push-action@v3
        with:
          context: .
          file: apps/api-server/Dockerfile
          push: true
          tags: |
            us-docker.pkg.dev/repro-383518/repro/api-server:${{ github.sha }}
            us-docker.pkg.dev/repro-383518/repro/api-server:${{ steps.vars.outputs.branch }}

  migrate:
    needs: build

    runs-on: ubuntu-20.04

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Load NX build cache
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/.nx-cache
          key: nx-build-cache

      - name: Setup toolchain
        uses: asdf-vm/actions/install@v2

      - name: Install dependencies
        run: pnpm install

      - name: Run database migration
        run: pnpm nx run @repro/api-server:migrate
        env:
          DB_HOST: ${{ secrets.PROD_DB_HOST }}
          DB_PORT: ${{ secrets.PROD_DB_PORT }}
          DB_USER: ${{ secrets.PROD_DB_USER }}
          DB_PASSWORD: ${{ secrets.PROD_DB_PASSWORD }}
          DB_DATABASE: ${{ secrets.PROD_DB_DATABASE }}
          DB_USE_SSL: true

  deploy:
    needs: migrate

    runs-on: ubuntu-20.04

    steps:
      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v1
        with:
          service_account: ${{ secrets.GOOGLE_SERVICE_ACCOUNT }}
          credentials_json: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_KEY }}

      - name: Deploy production build to Cloud Run
        uses: google-github-actions/deploy-cloudrun@v1
        with:
          service: production-api
          image: us-docker.pkg.dev/repro-383518/repro/api-server:${{ github.sha }}
          region: us-east1
          flags: '--allow-unauthenticated'
          env_vars: |
            NODE_ENV=production
            DB_HOST=${{ secrets.PROD_DB_HOST }}
            DB_PORT=${{ secrets.PROD_DB_PORT }}
            DB_USER=${{ secrets.PROD_DB_USER }}
            DB_PASSWORD=${{ secrets.PROD_DB_PASSWORD }}
            DB_DATABASE=${{ secrets.PROD_DB_DATABASE }}
            DB_USE_SSL=true
            AWS_S3_ENDPOINT=${{ secrets.AWS_S3_ENDPOINT }}
            AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
            AWS_REGION=${{ secrets.AWS_REGION }}
            RESOURCES_BUCKET_NAME=${{ secrets.RESOURCES_BUCKET_NAME }}
            EMAIL_FROM_ADDRESS=noreply@repro.dev
            EMAIL_SMTP_HOST=localhost
            EMAIL_SMTP_PORT=1025
            EMAIL_SMTP_USE_CREDENTIALS=true
            EMAIL_SMTP_USER=0
            EMAIL_SMTP_PASS=0
            EMAIL_TEMPLATE_DIRECTORY=templates/email
            PADDLE_VENDOR_ID=0
            PADDLE_API_KEY=0
            PADDLE_SANDBOX=true
            PADDLE_TEAM_PLAN_MONTHLY=0
            PADDLE_TEAM_PLAN_ANNUAL=0
